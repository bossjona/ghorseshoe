geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0.75, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0.1, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0.25, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0.5, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0.4, y = 0.03, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y = 0.1, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y = 0.02, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y = 0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y = 0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0.75, y = -0.0025, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.025, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.001, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.002, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.0025, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.003, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.0035, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.004, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = "Race Difference\nIndependent of SES", size = 6) +
annotate("text", x = 0, y = -0.005, hjust = 0, label = "No Race Difference", size = 6)
ggplot(dat, aes(x=class, y=beta, colour=grp)) + theme_pubr() +
xlab("\nLatent SES Class") + ylab("Percent Difference\n") +
geom_hline(lty = 2, yintercept = 0) + geom_hline(yintercept = 0.03458461) +
geom_errorbar(aes(ymin = low, ymax = high), width = 0.25, position = pd, lwd = 2) +
geom_point(position = pd, size = 4) + scale_color_brewer(direction = -1) +
theme(text = element_text(size = 20)) + labs(colour = "LCA Method:") +
annotate("text", x = 0, y =  0.025, hjust = 0, label = " Race Difference\n Independent of SES", size = 6) +
annotate("text", x = 0, y = -0.005, hjust = 0, label = " No Race Difference", size = 6)
draw.stratum <- function(n.stratum, data) {
data$s.wt <- data$s.wt * 30000 / n.stratum
data[sample((1:nrow(data)), n.stratum, prob = data$prob_sel),]
}
draw.psu <- function(n.psu, data) {
data$s.wt <- data$s.wt * 15000 / n.psu
data[sample((1:nrow(data)), n.psu, prob = data$prob_sel),]
}
generate.sample <- function(void) {
pop.split       <- split(data, data$stratum)
samples.stratum <- do.call("rbind", mapply(draw.stratum, n = c(8000, 6000, 4000),
data = pop.split, SIMPLIFY = F))
stratum.split   <- split(samples.stratum, samples.stratum$psu)
samples.psu     <- do.call("rbind", mapply(draw.psu, n = c(2400, 1600, 1800, 1200, 1200, 800),
data = stratum.split, SIMPLIFY = F))
return(samples.psu)
}
fit.model <- function(formula, design, var) {
fit   <- svyglm(formula, design)
index <- names(coef(fit)) == var
return(as.numeric(c(coef(fit)[index], sqrt(diag(vcov(fit))[index]))))
}
generate.sample()
source('C:/Users/saler/Google Drive/~ TO DO ~/RankLikelihood/rankBFA.R')
remove.packages("RankBFA")
install.packages("C:/Users/saler/Desktop/RankBFA_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RankBFA)
?`RankBFA-package`
?rankBFA
rankBFA
Y <- matrix(rnorm(30), nrow = 10)
rankBFA(Y)
remove.packages("RankBFA")
install.packages("C:/Users/saler/Desktop/RankBFA_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(RankBFA)
rankBFA(Y)
Y <- matrix(rnorm(30), nrow = 10)
rankBFA(Y)
?`RankBFA-package`
library(mvtnorm)
?rmvnorm
remove.packages("RankBFA")
install.packages("C:/Users/saler/Desktop/RankBFA_0.0.0.9000.tar.gz", repos = NULL, type = "source")
rankBFA(Y)
4:3
?rep
rep(4:3, each = c(2,4))
rep(rep(4,2), rep(3,4), 4)
rep(c(rep(4,2), rep(3,4)), 4)
inits <- rep(c(rep(4,2), rep(3,4)), 4); inits[length(inits)]
inits <- rep(c(rep(4,2), rep(3,4)), 4); inits[length(inits)] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T)
init.tab
rowSums(init.tab)
colSums(init.tab)
inits
length(inits)
inits <- rep(c(rep(4,2), rep(3,4)), 4);
inits
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab
inits
init.tab <- matrix(inits, nrow =5, byrow = T)
rowSums(init.tab)
colSums(init.tab)
?sample
sample.int(nrow(init.tab))
sample.int(nrow(init.tab), 2)
curr.tab <- init.tab
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
curr.tab[cand.rows, cand.cols]
matrix(c(1,-1,-1,1))
matrix(c(1,-1,-1,1), nrow = 2)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
curr.tab[cand.rows, cand.cols] + tab.update
(curr.tab[cand.rows, cand.cols] + tab.update) >= 0
all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)
all(matrix(c(F,T,T,T), nrow = 2))
max(curr.tab)
n.its <- 50
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 5000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 5000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 5000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 10000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 50000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 100000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 100000
Y <- numeric(n.its)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
n.its <- 500000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
hist(Y)
n.its <- 500000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
prop.table(table(Y))
n.its <- 500000
Y <- numeric(n.its)
tab.update <- matrix(c(1,-1,-1,1), nrow = 2)
inits <- c(rep(c(rep(4,2), rep(3,4)), 4), 4); inits[21] <- 4
init.tab <- matrix(inits, nrow =5, byrow = T); init.tab
curr.tab <- init.tab
set.seed(20181119)
for(i in 1:n.its){
Y[i] <- max(curr.tab)
cand.rows <- sample.int(nrow(curr.tab), 2)
cand.cols <- sample.int(ncol(curr.tab), 2)
# curr.tab[cand.rows, cand.cols]
if(all((curr.tab[cand.rows, cand.cols] + tab.update) >= 0)){
curr.tab[cand.rows, cand.cols] <- curr.tab[cand.rows, cand.cols] + tab.update
}
}
hist(Y)
prop.table(table(Y))
hist(Y)
?hist
install.packages('tinytex')
tinytex::install_tinytex()
old_path <- Sys.getenv("PATH")
old_path
?grep
grep("miktex", old_path)
old_path
Sys.which('xelatex')
test <- Sys.which('xelatex')
test
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\Users\saler\AppData\Local\Programs\MikTex 2.9\miktex\bin", sep=.Platform$path.sep))
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Users\\saler\\AppData\\Local\\Programs\\MikTex 2.9\\miktex\\bin", sep=.Platform$path.sep))
remove.packages("MASS", lib="C:/Program Files/R/R-3.5.1/library")
install.packages("MASS")
install.packages("Rcpp")
install.packages(c("ape", "backports", "BDgraph", "BH", "broom", "callr", "car", "carData", "checkmate", "cli", "clipr", "cobalt", "coda", "colorspace", "commonmark", "cowplot", "cubature", "curl", "data.table", "deldir", "dendextend", "DescTools", "digest", "doParallel", "dplyr", "e1071", "evaluate", "expm", "fansi", "fastGHQuad", "gbm", "ggmap", "ggplot2", "ggpubr", "git2r", "gplots", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httr", "igraph", "installr", "irr", "jomo", "jsonlite", "kableExtra", "kernlab", "knitr", "labelled", "lavaan", "lme4", "lmerTest", "maptools", "markdown", "mclust", "MCMCglmm", "mice", "mime", "missMDA", "mitml", "nloptr", "OpenMx", "openssl", "pbapply", "pillar", "pkgconfig", "pls", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "randomForestSRC", "raster", "rcmdcheck", "readr", "readxl", "rio", "rlang", "rmarkdown", "robustbase", "rockchalk", "roxygen2", "rstpm2", "rstudioapi", "sandwich", "scales", "semTools", "sf", "sm", "spatstat", "StanHeaders", "statnet.common", "stringi", "stringr", "SuperLearner", "survey", "survival", "survminer", "tensorA", "tibble", "tidyr", "tidyselect", "XML", "xtable", "yaml", "zoo"))
install.packages("yaml")
install.packages("yaml")
devtools::install_github("mangothecat/rmdshower")
(-0.18-0.49)/2
(-0.49-0.18)/2
-0.49-0.18
-0.49+0.18
library(Rcpp); library(RcppArmadillo); library(ggplot2); library(reshape2)
library(biostat815hw3arma);
set.seed(815); burn.in <- 5
sim <- simul.mv.gmm(15000, c(2,1), matrix(c(-1,2,3,-2),2,2), array(c(1,-1,-1,4,2,0,0,3),c(2,2,2)))
mv_dnorm_arma(sim$x, 100, c(0,0), matrix(c(1,0,0,1),2,2))
r <- mv_gibbs_gmm_arma(sim$x, 2, 1, 100, 5)
df <- data.frame(x1=sim$x[,1],x2=sim$x[,2],z=as.factor(sim$z))
pdf("simul.mv.gmm.example.label.pdf",width=10,height=5)
ggplot(df,aes(x1,x2,colour=z)) + geom_point(size=0.5,alpha=0.3)
dev.off()
df <- data.frame(r$lambdas,iter=1:nrow(r$lambdas))
colnames(df) <- c("lambda.1","lambda.2","iter")
dfm <- melt(df,id.vars=("iter"))
pdf("gibbs.gmm.2d.lambdas.pdf",width=10,height=5)
ggplot(dfm,aes(iter,value,colour=variable)) + geom_point()
dev.off()
df <- data.frame(r$mus,iter=1:nrow(r$mus))
colnames(df) <- c("mu.1.1","mu.1.2","mu.2.1","mu.2.2","iter")
dfm <- melt(df,id.vars=("iter"))
pdf("gibbs.gmm.2d.mus.pdf",width=10,height=5)
ggplot(dfm,aes(iter,value,colour=variable)) + geom_point()
dev.off()
df <- data.frame(r$covs,iter=1:nrow(r$covs))
colnames(df) <- c("cov.1.11","cov.1.21","cov.1.22","cov.2.11","cov.2.21","cov.2.22","iter")
dfm <- melt(df,id.vars=("iter"))
pdf("gibbs.gmm.2d.covs.pdf",width=10,height=5)
ggplot(dfm,aes(iter,value,colour=variable)) + geom_point()
dev.off()
tic <- proc.time(); r <- mv_gibbs_gmm_arma(sim$x, 2, 10, 1000, 5); toc <- proc.time(); print(toc-tic)
tic <- proc.time(); r <- mv_gibbs_gmm_arma(sim$x, 2, 10, 1000, 5); toc <- proc.time(); print(toc-tic)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+ 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1:4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+ 1000
my_div
1:10
1:100
1:1000
?set.seed
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(roxygen2)
library(usethis)
setwd("C:/Users/saler/Google Drive/Winter 2019/BIOSTAT 815 - Advanced Topics in Computational Statistics/Jon")
RcppArmadillo.package.skeleton("ghorseshoe", example_code = F)
setwd("ghorseshoe")
usethis::use_gpl3_license("Jonathan Boss")
usethis::use_gpl3_license("Jonathan Boss")
compileAttributes(verbose = T)
devtools::load_all()
devtools::document()
install.packages("GeneralizedHyperbolic")
compileAttributes(verbose = T)
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
sessionInfo()
